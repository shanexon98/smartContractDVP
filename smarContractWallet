// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

library StringUtils {
    function uintToString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}

contract GeneradorWallet {
    using StringUtils for uint256;

    // Estructura para representar una Wallet
    struct Wallet {
        address direccion;
        string llavePrivada;
    }

    // Array para almacenar las wallets generadas
    Wallet[] public wallets;

    // Evento para notificar cuando se genera una wallet
    event WalletCreada(address indexed _direccion, string _llavePrivada);

    // Función para crear una wallet con llave pública
    function crearWalletConLlavePublica()
        public
        returns (address, string memory)
    {
        bytes32 randomHash = keccak256(
            abi.encodePacked(block.timestamp, msg.sender, wallets.length)
        );
        string memory llavePrivada = uint256(randomHash).uintToString();

        address nuevaDireccion = address(
            uint160(
                uint256(
                    keccak256(
                        abi.encodePacked(
                            block.timestamp,
                            msg.sender,
                            wallets.length
                        )
                    )
                )
            )
        );

        wallets.push(
            Wallet({direccion: nuevaDireccion, llavePrivada: llavePrivada})
        );

        emit WalletCreada(nuevaDireccion, llavePrivada);

        return (nuevaDireccion, llavePrivada);
    }

    // Función para obtener todas las wallets creadas
    function obtenerTodasLasWallets() public view returns (Wallet[] memory) {
        return wallets;
    }

    // Función para obtener la llave privada asociada a una dirección de wallet
    function obtenerLlavePrivada(address _direccion)
        public
        view
        returns (string memory)
    {
        for (uint256 i = 0; i < wallets.length; i++) {
            if (wallets[i].direccion == _direccion) {
                return wallets[i].llavePrivada;
            }
        }
        revert("Wallet no encontrada");
    }

    // Función para obtener la llave pública de una wallet existente
    function obtenerLlavePublica(address _direccion)
        public
        view
        returns (string memory)
    {
        for (uint256 i = 0; i < wallets.length; i++) {
            if (wallets[i].direccion == _direccion) {
                return addressToString(wallets[i].direccion);
            }
        }
        revert("Wallet no encontrada");
    }

    // Función auxiliar para convertir una dirección a una cadena
    function addressToString(address _address)
        private
        pure
        returns (string memory)
    {
        bytes32 value = bytes32(uint256(uint160(_address)));
        bytes memory alphabet = "0123456789abcdef";

        bytes memory str = new bytes(42);
        str[0] = "0";
        str[1] = "x";
        for (uint256 i = 0; i < 20; i++) {
            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];
            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];
        }
        return string(str);
    }
}
